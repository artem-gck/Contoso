@page "/production/edit/{id}"

@inject IProductionService _productionService

<div class="lable">
    <span class="lable-production">Обновить продукт</span>
</div>
<div class="container">
    <div class="left-side">
        <span>Продукт</span>
        <input @bind="NameField"></input>
        <span>Наименование</span>
        <input @bind="TypeField"></input>
        <span>Цвет</span>
        <input @bind="ColorField"></input>
    </div>
    <div class="right-side">
        <span>Количество</span>
        <input type="number" @bind="AmountField"></input>
        <span>Цена</span>
        <input type="number" @bind="PriceField"></input>
    </div>
</div>
<div class="buttons">
    <button @onclick="Update">Обновить</button>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private string NameField { get; set; }
    private string TypeField { get; set; }
    private string ColorField { get; set; }
    private int AmountField { get; set; }
    private decimal PriceField { get; set; }

    private int id;
    private int statusCode;

    protected override async Task OnInitializedAsync()
    {
        id = int.Parse(Id);
        var products = await _productionService.GetProducts();

        var product = products.FirstOrDefault(prod => prod.Id == id);

        NameField = product.Name;
        TypeField = product.Type;
        ColorField = product.Color;
        AmountField = (int)product.Amount;
        PriceField = (decimal)product.Price;
    }

    private async Task Update()
    {
        var product = new Product()
            {
                Id = id,
                Name = NameField,
                Type = TypeField,
                Color = ColorField,
                Amount = AmountField,
                Price = PriceField
            };

        statusCode = await _productionService.UpdateProduct(product);

        NavManager.NavigateTo("/production");
    }
}
